/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HKStack;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.time.Duration;

import javax.imageio.ImageIO;

import edu.sc.seis.receiverFunction.HKStack;
import edu.sc.seis.receiverFunction.HKStackImage;
import edu.sc.seis.seisFile.sac.SacTimeSeries;
import edu.sc.seis.sod.model.common.FissuresException;
import edu.sc.seis.sod.model.common.QuantityImpl;
import edu.sc.seis.sod.model.common.UnitImpl;
import edu.sc.seis.sod.model.seismogram.LocalSeismogramImpl;
import edu.sc.seis.sod.util.convert.sac.SacToFissures;
import edu.sc.seis.sod.util.time.ClockUtil;

public class App {
    public String getUsage() {
        return "Usage: HKStack receiverfunction.sac";
    }

    public static void main(String[] args) throws FileNotFoundException, IOException, FissuresException {
    	if (args.length == 0) {
    		System.out.println(new App().getUsage());
    	}
    	boolean doImage = true;
    	boolean doValues = false;
        QuantityImpl alpha = new QuantityImpl(6.1, UnitImpl.KILOMETER_PER_SECOND);
        QuantityImpl minH = new QuantityImpl(30, UnitImpl.KILOMETER);
        QuantityImpl stepH = new QuantityImpl(.25, UnitImpl.KILOMETER);
        int numH = 100;
        
        float minK = 1.5f;
        float stepK = 0.005f;
        int numK = 100;
        float weightPs = 1.0f/3;
        float weightPpPs = 1.0f/3;
        float weightPsPs = 1 - weightPs - weightPpPs;
        
        SacTimeSeries sac = new SacTimeSeries(args[0]);
        float percentMatch = sac.getHeader().getUser0();
        float quassianWidth = sac.getHeader().getUser1();
        float rayParam = sac.getHeader().getUser2();
        System.out.println("percentMatch "+percentMatch+"  quassianWidth: "+quassianWidth+"  rayParam:"+rayParam);
        
        LocalSeismogramImpl recFuncSeis = SacToFissures.getSeismogram(sac);
        Duration shift = ClockUtil.durationOfSeconds(sac.getHeader().getA()-sac.getHeader().getB());
        System.out.println("shift:  "+shift+"   "+sac.getHeader().getA()+" "+sac.getHeader().getB());
        
        HKStack stack = new HKStack(alpha,
        		rayParam,
                quassianWidth,
                percentMatch,
                minH,
                stepH,
                numH,
                 minK,
                 stepK,
                 numK,
                 weightPs,
                 weightPpPs,
                 weightPsPs,
                 recFuncSeis,
                 shift);
        if (doValues) {
        	float[][] stackVals = stack.getStack();
        	for(int j = 0; j < stackVals.length; j++) {
        		for(int k = 0; k < stackVals[j].length; k++) {
        			System.out.print(stackVals[j][k]+" ");
        		}
        		System.out.println();
        	}
        }
        if (doImage) {
        	HKStackImage stackImage = new HKStackImage(stack);
        	ImageIO.write(stackImage.createImage(400, 400), "png", new File("hkstack.png"));

        	BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));
        	stack.writeReport(out);
        	out.close();
        }
    }
}
